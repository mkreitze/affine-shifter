import numpy as np
import itertools as it
import matplotlib.pyplot as plt
from matplotlib.ticker import MaxNLocator
import pandas as pd
# Global params

WINDOWSIZE = 6
ALPHABET = [0,1,2]
VERBOSE = True
FILEOUTPUT = "deBFs.txt"
# params generated by global params, are unchanging

ALPHABETSIZE = len(ALPHABET)
MAXSIZE = ALPHABETSIZE**WINDOWSIZE
aNums = 2 # {1,|A|-1} (non zeros)
cNums = 1 # = (1 - sum(c_i - a1)) moWd (|A|)
bNums = WINDOWSIZE - 2 # {0, |A|-1} (generics)


def makeGenShift(windowSize = WINDOWSIZE):
    genShift = np.eye(windowSize+1)
    genShift = np.roll(genShift,1,axis=1)
    genShift[-1] = 0
    genShift[-1,-1] = 1
    return(genShift)

def calcC(a1,bs,alphabetSize = ALPHABETSIZE):
    c = (1 - np.sum(bs) - a1)%alphabetSize
    return(c)

def checkCycle(shiftedWindow,shifter,alphabetSize = ALPHABETSIZE,maxSize = MAXSIZE):
    if VERBOSE:
        print("Shifts on 0 window")

    original = np.copy(shiftedWindow)
    i = 0 
    while True:
        if VERBOSE:
            print(shiftedWindow)
        shiftedWindow = (shifter@shiftedWindow)%alphabetSize
        i += 1
        if np.array_equal(original,shiftedWindow) or i == maxSize:
            break
    return(i)

def plotCycles(cycles,windowSize = WINDOWSIZE, maxSize = MAXSIZE):
    df = pd.DataFrame(cycles).pivot_table(columns=0, aggfunc='size')
    x = df.index.values
    y = df.values
    plt.bar(x,y)
    plt.xticks(x)
    plt.title(f"Cycle sizes containing zero vector for window size {WINDOWSIZE} and alphabet {ALPHABET}, \n total {MAXSIZE}")
    plt.savefig("Fig")
    plt.show()

#fix this

# def printCycles(shifter,cycleLength,allWindows,alphabetSize = ALPHABETSIZE):
#     cycles = np.array([0])
#     output.write(f"Shifter: \n")
#     output.write(f"{str(shifter)} \n")
#     for window in allWindows:
#         curWindow = np.array(window)
#         output.write(f"For cycle with {curWindow}: \n")
#         for i in range(cycleLength):
#             print(curWindow)
#             output.write(str(curWindow))
#             curWindow = str((shifter@curWindow)%alphabetSize)



# precomputes template
shifterTemplate = makeGenShift()

# gets all valid a and b combinations
allAs = it.product(ALPHABET[1:], repeat = 2)
allBs = it.product(ALPHABET, repeat = bNums)

# This precomputes all windows
windows = it.product(ALPHABET, repeat = WINDOWSIZE)
allWindows = []
for window in windows:
    temp = np.ones((1,WINDOWSIZE+1))
    temp[0,:-1] = window
    allWindows.append(temp)


output = open(f"{FILEOUTPUT}","w")
output.write(f"De Bruijn Families found for: \n")
output.write(f"Alphabet = {ALPHABET} \n")
output.write(f"Window size = {WINDOWSIZE} \n")




cycles = []
# actual main function
for a in allAs:
    for b in allBs:
        newShifter = np.copy(shifterTemplate)
        c = calcC(a[1],b)
        row = list(a)
        row.insert(1,c)
        row[1:1] = b
        newShifter[-2] = row
        # above generates possible shifter matrix, validated for A = {0,1} w = 3

        if VERBOSE:
            print("Shifter used")
            print(newShifter)

        cycleLength = checkCycle(allWindows[6][0],newShifter)
        if VERBOSE:
            print("Cycle length")
            print(cycleLength)
            print(MAXSIZE)

        if cycleLength == 4:
            print("we're good")
            # printCycles(newShifter,cycleLength,allWindows)
        cycles.append(cycleLength)




plotCycles(cycles)
